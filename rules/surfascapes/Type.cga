/**
 * File:    Type.cga
 * Created: 14 Nov 2021 18:39:17 GMT
 * Author:  skamins000
 */

version "2021.0"

import meterConverter: "meterToFeet.cga"
#	Do not copy paste. Import the rule like the example above. if you want to use a function call it the following way:
# 	meterConverter.feet(yourValue)
#	meterConverter.sqmeterTosqft(yourValue)
# 	see the rule file for full functionality and documentation

### Constants ###
const textureFolder =  "assets/" 

@Enum("A", "B", "C", "D", "E", "F")
attr type = "A"

@Enum("H", "I", "J", "K")
attr shapeType = "H"

### Attributes ###

#create attrubute widths for the type splits
@Range (min=1, max=10)
attr floraHydro_width = meterConverter.feet(3)
attr service_width = meterConverter.feet(10)

@Distance
@Range (min=1, max=10)
attr pedestrian_width = meterConverter.feet(6)


@Range (min=1, max=9)
attr shoulder_width = meterConverter.feet(9)


attr bike_width = 6


### Functions ###

#split type A into parts, greenways, two bike lanes, shoulder, two car lames, another shoulder and another greenway
@StartRule
Types-->
	case type == "A":
		split(v, unitSpace, 0){ ~pedestrian_width : pedestrianColor  // first sidewalk
							|floraHydro_width : floraHydroColor	scatterGrass // first greenway
							| meterConverter.feet(bike_width) : bikeColor  		// first bike path
							| meterConverter.feet(bike_width) : bikeColor  		// second bike path
							| shoulder_width : shoulderColor	 	// first shoulder
							| service_width : serviceColor 		// first service road
							| service_width : serviceColor 	// second service road
							| shoulder_width : shoulderColor 		 	// second shoulder
							| floraHydro_width  : floraHydroColor scatterGrass // second greenway
							| ~pedestrian_width : pedestrianColor } 	// second sidewalk
							
	#split into parts, shoulder, two car lanes, another shoulder and two bike lanes
	case type == "B":
		split(v, unitSpace, 0){ meterConverter.feet(4): shoulderColor 	// first shoulder
							| service_width  : serviceColor 		// first service road
							| service_width  : serviceColor 		// second service road
							| meterConverter.feet(4) : shoulderColor 	 	// second shoulder
							| meterConverter.feet(bike_width) : bikeColor  		// first bike path
							| meterConverter.feet(bike_width) : bikeColor} 		// second bike path


	case type == "C":
		split(v, unitSpace, 0){ ~floraHydro_width : floraHydroColor	scatterTree scatterGrass// first greenway
						 	| pedestrian_width : pedestrianColor		 	// first pedestrian way
							| meterConverter.feet(bike_width) : bikeColor  		// first bike path
							| meterConverter.feet(bike_width) : bikeColor		// second bike path
							| pedestrian_width : pedestrianColor 	 	// second pedestrian way
							| ~floraHydro_width  : floraHydroColor scatterTree scatterGrass}	// second greenway

	case type == "D":
		split(v, unitSpace, 0){ meterConverter.feet(bike_width) : bikeColor 		// first bike path
				| meterConverter.feet(bike_width) : bikeColor 			// second bike path
			 	| ~pedestrian_width : pedestrianColor} 	 	// pedestrian way
		 	
		 	
	case type == "E": # Type E is only pedestrian so does not need split up
		split(v, unitSpace, 0){'pedestrian_width : pedestrianColor} 	 	// pedestrian way
	
	case type == "F":
		split(v, unitSpace, 0){~floraHydro_width : floraHydroColor scatterTree scatterGrass // greenway
							| pedestrian_width : pedestrianColor }		 	// pedestrian way

	else:
		NIL

floraHydroColor-->
	#use the folderPath you so cleverly declared above!!!!
	tileUV(0,20,20) texture(textureFolder + "FloraHydro.png")

bikeColor-->
	tileUV(0,20,20) texture(textureFolder + "Bike.png")
	extrude (meterConverter.feet(.3))

shoulderColor-->
	tileUV(0,20,20) texture(textureFolder + "Shoulder.png")
 	extrude (meterConverter.feet(.3))

pedestrianColor-->
 	tileUV(0,10,10) texture(textureFolder + "Pedestrian.png")
 	extrude (meterConverter.feet(.5))
 	
serviceColor-->
 	tileUV(0,20,20) texture(textureFolder + "Service.png")
 	extrude (meterConverter.feet(.3))
 
 scatterTree-->
 	scatter (surface, 5, uniform){treeObject}
 	
 treeObject-->
 s(5,5,5)
 i(textureFolder + "Lowpoly_tree_sample.dae")
 
 scatterGrass-->
 	scatter (surface, 5, uniform){grassObject}
 	
 grassObject-->
 s(1,1,1)
 i(textureFolder + "WildGrass.dae")

###### Roundabout function isn't working########
#Roundabout--> 
 #split(v, unitSpace, 0)
 #{ 3: TestShape | 3: TestShape }
 
#TestShape -->
 #setupProjection(0,scope.xz, scope.sx, scope.sy) 
   #projectUV(0) 
 #tileUV(0, 1, 1) pedestrianColor



nonDeveloped-->
	case shapeType == "H":
			floraHydroColor scatter(surface, 5, gaussian){treeObject} scatter(surface, 5, uniform){grassObject}
	case shapeType == "I":
			setback(10) {all : pedestrianColor | remainder : floraHydroColor scatter(surface,5, uniform){grassObject}}
		
								
else: NIL
