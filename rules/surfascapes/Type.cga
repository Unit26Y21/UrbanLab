/**
 * File:    Type.cga
 * Created: 14 Nov 2021 18:39:17 GMT
 * Author:  skamins000
 */

version "2021.0"

import meterConverter: "meterToFeet.cga"
#	Do not copy paste. Import the rule like the example above. if you want to use a function call it the following way:
# 	meterConverter.feet(yourValue)
#	meterConverter.sqmeterTosqft(yourValue)
# 	see the rule file for full functionality and documentation

### Constants ###
const textureFolder =  "assets/" 

@Enum("A", "A1", "B", "C", "C1", "D", "D1", "E", "E1", "F")
attr type = "A"


### Attributes ###

#create attrubute widths for the type splits
@Range (min=1.87, max=3.05)
attr floraHydro_width = meterConverter.feet(3)
attr service_width = meterConverter.feet(10)

@Range (min=1.87, max=3.05)
attr pedestrian_width = meterConverter.feet(6)
attr shoulder_width = meterConverter.feet(8)
attr bike_width = meterConverter.feet(6)


### Functions ###

#split type A into parts, greenways, two bike lanes, shoulder, two car lames, another shoulder and another greenway
@StartRule
Types-->
	case type == "A":
		split(v, unitSpace, 0){ ~pedestrian_width : pedestrianColor  // first sidewalk
							|floraHydro_width : floraHydroColor scatterTree2 // first greenway
							| bike_width : bikeColor  		// first bike path
							| bike_width : bikeColor  		// second bike path
							| shoulder_width : shoulderColor	 	// first shoulder
							| service_width : serviceColor 		// first service road
							| service_width : serviceColor 	// second service road
							| shoulder_width : shoulderColor 		 	// second shoulder
							| floraHydro_width  : floraHydroColor scatterTree2 // second greenway
							| ~pedestrian_width : pedestrianColor } 	// second sidewalk

	case type == "A1":
		split(v, unitSpace, 0){ ~pedestrian_width : pedestrianColor  // first sidewalk
							|floraHydro_width : floraHydroColor scatterLightpost scatterTree1 scatterTree2 // first greenway
							| bike_width : bikeColor  		// first bike path
							| bike_width : bikeColor  		// second bike path
							| shoulder_width : shoulderColor scatterTable	 	// first shoulder
							| service_width : serviceColor 		// first service road
							| service_width : serviceColor 	// second service road
							| shoulder_width : shoulderColor scatterTable		 	// second shoulder
							| floraHydro_width  : floraHydroColor scatterLightpost scatterTree1 scatterTree2 // second greenway
							| ~pedestrian_width : pedestrianColor } 	// second sidewalk
		
	#split into parts, shoulder, two car lanes, another shoulder and two bike lanes
	case type == "B":
		split(v, unitSpace, 0){ shoulder_width : shoulderColor 	// first shoulder
							| service_width : serviceColor 		// first service road
							| service_width : serviceColor 		// second service road
							| shoulder_width : shoulderColor scatterLightpost	 	// second shoulder
							| bike_width : bikeColor  		// first bike path
							| bike_width : bikeColor} 		// second bike path


	case type == "C":
		split(v, unitSpace, 0){ ~floraHydro_width : floraHydroColor scatterTree1 scatterTree2 // first greenway
						 	| pedestrian_width : pedestrianColor		 	// first pedestrian way
							| bike_width : bikeColor  		// first bike path
							| bike_width : bikeColor		// second bike path
							| pedestrian_width : scatterLightpost pedestrianColor 	// second pedestrian way
							| ~floraHydro_width  : floraHydroColor  scatterTree1 scatterTree2 }	// second greenway

	case type == "C1": //C1 includes miniATMs
		split(v, unitSpace, 0){ ~floraHydro_width : floraHydroColor	scatterTree1 scatterTree2 // first greenway
						 	| pedestrian_width : pedestrianColor		 	// first pedestrian way
							| bike_width : bikeColor  		// first bike path
							| bike_width : bikeColor		// second bike path
							| pedestrian_width : scatterLightpost pedestrianColor scatterATM	 	// second pedestrian way
							| ~floraHydro_width  : floraHydroColor scatterTree1 scatterTree2 }	// second greenway

	case type == "D":
		split(v, unitSpace, 0){ bike_width : bikeColor 		// first bike path
				| bike_width : bikeColor 			// second bike path
			 	| ~pedestrian_width : pedestrianColor scatterLightpost} 	 	// pedestrian way

	case type == "D1": //D1 includes miniATMs and interstitial tables
		split(v, unitSpace, 0){ bike_width : bikeColor 		// first bike path
				| bike_width : bikeColor 			// second bike path
			 	| ~pedestrian_width : pedestrianColor scatterATM scatterTable scatterLightpost} 	 	// pedestrian way
		 	
	case type == "E": # Type E is only pedestrian so does not need split up
		split(v, unitSpace, 0){'pedestrian_width : pedestrianColor
			| .1 : pedestrianColor scatterLightpost} 	 	// pedestrian way

	case type == "E1": # E1 includes miniATMs and interstitial tables
		split(v, unitSpace, 0){'pedestrian_width : pedestrianColor 
		| .1 : pedestrianColor pedestrianColor scatterATM scatterTable scatterLightpost
		| pedestrian_width: pedestrianColor } 	 	// pedestrian way

	case type == "F":
		floraHydroColor scatterTree2

	else:
		NIL

floraHydroColor-->
	tileUV(0,2,0) texture(textureFolder + "surfacescapes/Matrix Paver with Sod Infill.png")

bikeColor-->
	tileUV(0,2,2) texture(textureFolder + "surfacescapes/Pedestrian Paver Dot Pattern.png")
	extrude (meterConverter.feet(.3))

shoulderColor-->
	tileUV(0,2,2) texture(textureFolder + "surfacescapes/Matrix Paver Black with Gravel Infill.png")
 	extrude (meterConverter.feet(.3))

pedestrianColor-->
 	tileUV(0,2,2) texture(textureFolder + "surfacescapes/Matrix Paver Black with Gravel Infill.png")
 	extrude (meterConverter.feet(.5))
 	
serviceColor-->
 	tileUV(0,2,2) texture(textureFolder + "surfacescapes/Matrix Paver White with Gravel Infill.png")
 	extrude (meterConverter.feet(.3))
 
 #######TREES#########
#scatterTree1-->
 	#scatter (surface, 4, uniform){treeObject1}

scatterTree2-->
 	scatter (surface, 1, uniform){treeObject2}	
 	
 #treeObject1-->
 	#i(textureFolder + "ecology/Black Alder Tree.dae")
 	
 treeObject2-->
 	s(0,8,0)
 	i(textureFolder + "ecology/River Birch.dae")
 
 #######ATM#########
 scatterATM-->
 	scatter (surface, 2, gaussian, center, '1){ATMObject}
 	
 ATMObject-->
 	s (2,1,1)
 	i(textureFolder + "Mini_ATM_ExportModel.dae")

#########INTERSTITIAL TABLE##############
 scatterTable-->
 	scatter (surface, 1, gaussian, center, '.1){tableObject}
 	
tableObject-->
 	s(2,1,1)
 	i(textureFolder + "interstitialTable.obj")

################LIGHTPOST##############
scatterLightpost-->
 	scatter (surface, 1, gaussian, center, '.16){lightpostObject}

 lightpostObject-->
 	i(textureFolder + "surfacescapes/LightPole_Tall.dae")

##########REPORT##################

 