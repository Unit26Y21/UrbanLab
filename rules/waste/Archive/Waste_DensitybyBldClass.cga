/**
 * File:    Waste_DensitybyBldClass.cga
 * Created: 5 Nov 2021 14:29:26 GMT
 * Author:  kkenny000
 */

version "2021.0"


import ecologyLotLayout: "ecology/LotLayout.cga"
import telecom: "telecom/telecomTower.cga"
import events: "events/BalanceSpacesBldg.cga"

##### CONSTANTS ########

const AvgHouseholdSize = 3

const InhabitantsPerBld = AvgHouseholdSize * NumberofHouseholds 

#lbs of waste per HH by waste type 
wastePerHH(WasteType) = 
	case WasteType == "Refuse": 7.09
	case WasteType == "Organics": 7.93
	case WasteType == "Paper": 9.64
	case WasteType == "Metal": 1.18
	case WasteType == "Plastic": 1.47
	case WasteType == "Glass": 4.41
	case WasteType == "Textiles": 2.41
	case WasteType == "Other": 4.11
	else: 0

#This list of BldgClass is powerfull
#Consider creating a const so you instatiated once and access it at all points
						#[0,1,2,3,4] a specific order
const BldgClassType = ["Low Walkup", "High Walkup", "Low High Rise", "Medium High Rise", "Dense High Rise"]

##### ATTRIBUTES ######

@Enum("Ecology", "BalanceSpace")
attr selectNextSystem = ""

@Enum("Low Walkup", "High Walkup", "Low High Rise", "Medium High Rise", "Dense High Rise") 
attr BldgClass = 
	50%: BldgClassType[0]
	20%:BldgClassType[1]
	10%: BldgClassType[3]
	5%: BldgClassType[2]
	else: BldgClassType[4]

# is this per floor or per building
# if per floor talk to ecology

attr NumberofHouseholds =
	case BldgClass == "Low Walkup": rand(4,10)
	case BldgClass == "High Walkup": rand(10,18)
	case BldgClass == "Low High Rise": rand(20,50)
	case BldgClass == "Medium High Rise": rand(50,100)
	case BldgClass == "Dense High Rise": rand(100,150)
	else: 0.5


attr Height =
	case BldgClass == "Low Walkup" && NumberofHouseholds >=6: 9
	case BldgClass == "Low Walkup" && NumberofHouseholds <10: 10
	case BldgClass == "High Walkup"&& NumberofHouseholds >=14: 17
	case BldgClass == "High Walkup" && NumberofHouseholds <18: 22
	case BldgClass == "Low High Rise" && NumberofHouseholds >=30: 20
	case BldgClass == "Low High Rise" && NumberofHouseholds <50: 25
	case BldgClass == "Medium High Rise" && NumberofHouseholds >=50: 30
	case BldgClass == "Medium High Rise" && NumberofHouseholds >=60: 35
	case BldgClass == "Dense High Rise" && NumberofHouseholds >60: 40
	case BldgClass == "Dense High Rise" && NumberofHouseholds <=80: 50
	else: 10

# @Katie should this not be a functio???
# Do you want to give the user the option to change the color??
# If the answer is no, then this should be a function
@Color
attr BldgColor = 
	case ColorBldgByUse:  assignBldgColor(BldgClass)
	else: "FFFFFF"

@Enum(true, false)
attr ColorBldgByUse = false

##### FUNCTIONS ######
###consider adding attribute for avg squarefootage per HH###

assignBldgColor(BldgClass) = 
	case BldgClass == "Low Walkup": "#FF0000"
	case BldgClass == "High Walkup": "#800000"
	case BldgClass == "Low High Rise": "#0000FF"
	case BldgClass == "Medium High Rise": "#00FF00"
	case BldgClass == "Dense High Rise": "#FFA500"
	else: "000000"

#I think this should be a constant that then you access using a function that reports
const WasteType = ["Refuse", "Organics", "Paper", "Metal", "Plastic", "Glass", "Textiles", "Other"] 


#function that gives you total waste per houseHold lbs
averageBuildingWaste(WasteTypeInput, NumberofHouseholds) = wastePerHH(WasteTypeInput) * NumberofHouseholds
	


##### RULES ######
@StartRule
WalkupParcel -->
	#we do not need to set Bldg Class because it already comes from the attributes
	# samething with BldgColor
	alignScopeToAxes(world.z)
	extrude(world.up.flatTop,Height)
	ruleGate1
	
	report("Building Class", BldgClass)
	report("People per Bld", InhabitantsPerBld) 
	report("Households per Bld", NumberofHouseholds)
	report("Building Height", Height) #maybe include height???
	reportWaste(0, WasteType)
	

ruleGate1 -->
	case selectNextSystem == "Ecology":
		ecologyLotLayout.SplitBuilding
		comp(f){object.top: Roof}
		
	case selectNextSystem == "BalanceSpaces":
		events.BdlgExtrusion
		comp(f){object.top: Roof}
	
	else:
		color(BldgColor)

reportWaste(i, list) -->
	case i < size(list):
		NIL
		report(list[i], i)
		reportWaste(i + 1, list)
	else:
		NIL
	
Roof --> 
	20%:
		center(xyz)
		primitiveQuad(2, 2)
		extrude(10)
		telecom.SmallTower
		
	else:
		NIL