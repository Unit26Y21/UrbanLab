/**
 * File:    LotLayout.cga
 * Created: 13 Nov 2021 03:18:10 GMT
 * Author:  nlaveau000
 */

version "2021.0"

import ecology: "ecology.cga"
import meterConverter: "MeterToFeet.cga" #this needs to match exactly the name of the file

#### ATTRIBUTES ####
#added this to give you more variation on that interior ecology
@Range(min = 0, max = 50)
	attr blockRearYard = meterConverter.feet(16) #this needs to be .feet. When in doubt, open the file you are importing to revise what are the available functions or rules

@Range(min = 3, max = 10)
	attr arcadeDepth = meterConverter.feet(9)

	attr columnMatrix = [3,4]
	
	
	
### TEXTURES ###

#FacadeTexture = (textures + "Wintercreeper.jpg")	

#### RULES ####

/*#Scenario 1: Setbacks on all Sides
# use StartRule to manage your different scenarios. You can use the same rule but different starting points
@StartRule
LowDensityLot -->	setback(meterConverter.meterTofeet(16)){	  street.front = Garden
					| street.back = Garden
					| street.left = Garden 
					| street.right = Garden 
					| remainder: LowDensityBuilding } 
LowDensityBuilding --> 
	extrude(world.up, meterConverter.feet(rand(16, 50)))
	keep.*/





#Scenario 2: Setbacks behind for internal couryard
@StartRule
HighDensityLot --> 
	setback(rand(meterConverter.feet(16))) { street.back = blockrearyard| street.right = Garden | street.left = Garden|street.front = Garden 
        					   | remainder: HighDensityBuilding }

HighDensityBuilding --> 
	extrude(world.up, meterConverter.feet(rand(200)))
	SplitBuilding

Garden --> 
	color("#567d46")
	
#Going up from ground floor
#Split building sides into floors
# the problem here is that you need to deploy split() inside a RULE

SplitBuilding -->
	split(y){meterConverter.feet(15): comp(f){street.front: FirstFloor |street.back:FirstFloor	 | street.right:FirstFloor |street.left:FirstFloor
						|object.bottom: FirstFloorColumns}  
			| ~1: OtherFloors
			}
			
####COLUMNS###
/*FirstFloorColumns -->
	split(x){columnMatrix[0]: 
			split(y){columnMatrix[1]:
				PlaceColumn}}
				
PlaceColumn -->
	comp(v){all: DrawColumn}

DrawColumn -->
	rotateScope(270,0,0)
	primitiveQuad(0.5,0.5)
	extrude(6)
				
FirstFloor --> 	
	extrude(arcadeDepth)
	alignScopeToAxes(y)
	comp(f){0: Columnade
			| 1: Columnade
			| 4: TopColumade}

Columnade -->
	split(x){ 0.5: keep.
			| 3: NIL
			| 0.5: keep.
			| 4: NIL
			}*

TopColumade -->
	offset(-1, all)
	extrude(1)*/
###

OtherFloors --> 
	split(y){meterConverter.feet(12):SlideFloors |meterConverter.feet(12):Floors keep.}*


###Balcony Tiles

Floors -->
	comp(f){object.top: FloorTop | street.front: Tile | street.back:Tile | street.right: Tile | street.left: Tile}

FloorTop -->
	color ("#800080")
	SelectBalcony
	
SelectBalcony -->
	case overlaps: NIL
	else: comp(f) {top : FloorArea}keep.
		report("FloorArea", geometry.area())
		#splitArea(x) { '0.6 : EnvironmentalSpace | '0.4 : BalanceSpace }
		
	#subtract balcony area from floors 
Tile --> 
	split(x){ meterConverter.feet(9): Balcony | meterConverter.feet(9): Balcony | meterConverter.feet(9): Balcony }*
    split (y){meterConverter.feet(9):Balcony | meterConverter.feet(9): Balcony | meterConverter.feet(9):Balcony}*
	
	
Balcony --> 
	extrude (meterConverter.feet(rand(2,6 )))	
	comp(f){object.top: BalconyTop | side:Facade | all:keep.}
	colorTiles
	
colorTiles -->
	color(rand(1), rand(1), rand(1))#texture(FacadeTexture)

#Facade -->	
#	setupProjection(0, scope.xy, 5, 5)
	#texture(FacadeTexture)
#	projectUV(0)
#	i ("Wintercreeper.jpg")
	
BalconyTop -->
	splitBalcony
	

splitBalcony -->
	split(y){meterConverter.feet(12): removeCoveredBalcony}*
		
removeCoveredBalcony -->
	case overlaps: NIL
	else: 
		#color
		comp(f) {top : BalconyArea}keep.
		report("Balcony Area", geometry.area())
		#splitArea(x) { '0.6 : EnvironmentalSpace | '0.4 : BalanceSpace }
		
BalconyArea-->
	color("#800080")
	#splitArea(x) { '0.6 : EnvironmentalSpace | '0.4 : BalanceSpace }

#EnvironmentalSpace -->
#	color("#567d46")

#BalanceSpace -->
#	color("#800080")
	
color -->
	color("#90EE90")
	###

SlideFloors -->
	case split.index < 1:
		DoNothing. #at first floor
	else:
		translate(rel, object, meterConverter.feet (rand(25)),0,meterConverter.feet(rand(25)) )
		Floors
		keep.
		Lot
	
#Reports 	
Lot -->
	ecology.Lot

SelectTopSurfaces -->
	ecology.SelectTopSurfaces

ReportTopSurfaces -->
	ecology.ReportTopSurfaces

