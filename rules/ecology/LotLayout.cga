/**
 * File:    LotLayout.cga
 * Created: 13 Nov 2021 03:18:10 GMT
 * Author:  nlaveau000
 */

version "2021.0"

#import ecology: "ecology.cga"

#### ATTRIBUTES ####
#added this to give you more variation on that interior ecology
@Range(min = 0, max = 100)
attr blockRearYard = 5

@Range(min = 3, max = 10)
attr arcadeDepth = 3

attr columnMatrix = [3,4]

#### RULES ####

/*#Scenario 1: Setbacks on all Sides*/
# use StartRule to manage your different scenarios. You can use the same rule but different starting points
@StartRule
LowDensityLot -->	setback(5){	  street.front = Garden
					| street.back = Garden 
					| street.left = Garden 
					| street.right = Garden 
					| remainder: LowDensityBuilding }
    	
Garden --> 
	color("#567d46")

LowDensityBuilding --> 
	extrude(world.up, rand(5, 15))keep.


#Scenario 2: Setbacks behind for internal couryard
HighDensityLot --> setback(rand(5, blockRearYard)) { street.back = Garden| street.right = Garden | street.left = Garden|street.front = Garden 
        					   | remainder: HighDensityBuilding }

HighDensityBuilding --> 
	extrude(world.up, (50))
	report("height", geometry.height())
	SplitBuilding


#Going up from ground floor
#Split building sides into floors
# the problem here is that you need to deploy split() inside a RULE

SplitBuilding -->
	split(y){6: comp(f){street.front: FirstFloor |street.back:FirstFloor	 | street.right:FirstFloor |street.left:FirstFloor
						|object.bottom: FirstFloorColumns}  
			| ~1: OtherFloors
			}
####COLUMS###
FirstFloorColumns -->
	split(x){columnMatrix[0]: 
			split(y){columnMatrix[1]:
				PlaceColumn}}
				
PlaceColumn -->
	comp(v){all: DrawColumn}

DrawColumn -->
	rotateScope(270,0,0)
	primitiveQuad(0.5,0.5)
	extrude(6)
				
FirstFloor --> 	
	extrude(arcadeDepth)
	alignScopeToAxes(y)
	comp(f){0: Columnade
			| 1: Columnade
			| 4: TopColumade}

Columnade -->
	split(x){ 0.5: keep.
			| 3: NIL
			| 0.5: keep.
			| 4: NIL
			}*

TopColumade -->
	offset(-1, all)
	extrude(1)
###

OtherFloors --> split(y){5:SlideFloors |5:Floors keep.}*
###Balcony Tiles
Floors -->

		comp(f){street.front: Tile | street.back:Tile | street.right: Tile | street.left: Tile}

	
Tile --> 
		split(x){ 3: Balcony | 3: Balcony | 3: Balcony }*
		split (y){1:Balcony | 1: Balcony | 1:Balcony}*
		
Balcony --> 
	extrude(rand(1,3 ))		
	comp(f){object.top: BalconyTop | all: keep.}
	#color 

BalconyTop -->
	
	splitBalcony
	


/*
	
Floors -->
	#select the Tiles of the floor
	comp(f){object.side: balconies | all: otherColor}
 	
 	
 balconies --> 
 	print(getTreeKey())
 	extrude(float(listItem(getTreeKey(),1)))
 	topBalconies 
 	
 topBalconies --> comp(f){top: ReportBalconieArea |	
 						 all: NIL}
 
ReportBalconieArea -->
	report("balconie area", geometry.area())					
 	color(0,1,0)
 
 
 floorColor --> color(rand(1),rand(1), rand(1))  
 
 otherColor --> color(1,0,0)	*/


splitBalcony -->
	split(y){1: removeCoveredBalcony}*
		
removeCoveredBalcony -->
	case overlaps: NIL
	else: 
		color
		report("Balcony Area", geometry.area())
		

color -->
	color("#90EE90")
	###

SlideFloors -->
case split.index < 1:
		DoNothing. #at first floor
	else:
		translate(rel, object, rand(8),0,rand(8) )
		#split (y){1:Balcony | 1: Balcony | 1:Balcony}*
		Floors
		keep.
		#Lot
	
#Reports 	
Lot -->
	ecology.Lot

SelectTopSurfaces -->
	ecology.SelectTopSurfaces

ReportTopSurfaces -->
	ecology.ReportTopSurfaces

