/**
 * File:    ecology.cga
 * Created: 27 Oct 2021 16:57:21 GMT
 * Author:  Nathan Laveu
 */

version "2021.0"

import plants: "plants.cga"
import meterConverter: "MeterToFeet.cga"
import vegetation: "vegetationCatalog.cga"

####### CONSTANTS ########

#Scenario 1:
#Since this is a value that changes depending on the scenario, it should be an attribute
#const RainfallIntensity = 0.025
#Rainfall Intensity to be 3 scenarios (0.025m,0.050m, 0.075m)

####### ATTRIBUTES #######
@Enum(0.083, 0.16, 0.25) 
#use enum to capture the three options
attr rainfallIntensity = meterConverter.feet (0.083)

@Hidden
attr runoffSavings = meterConverter.feet (0)

@Hidden 
attr roofArea = 0


#AssignSoilGrade
@Enum("GradeZero", "GradeOne", "GradeTwo", "GradeThree", "GradeFour") #considerusing integers instead of strings in the future.
attr soilGrade =
	50%: SoilGradeCoefficient("GradeOne")
	30%: SoilGradeCoefficient("GradeTwo")
	10%: SoilGradeCoefficient("GradeThree")
	10%: SoilGradeCoefficient("GradeFour")
	else: SoilGradeCoefficient("GradeZero")

/*#Assign seedColor	
attr seedColor =
case vegtype == "plant1" : "#EB5279"
case vegtype == "plant2" : "#EBA052"
case vegtype == "plant3" : "#00D100"
case vegtype == "plant4" : "#21B6A8" #BlueGreen
case vegtype == "plant5" : "#A3EBB1" #NeonGreen
case vegtype == "plant6" :
case vegtype == "plant7" :
case vegtype == "plant8" :
case vegtype == "plant9" :
case vegtype == "plant10":
else: "#FFFFFF"*/
 


####### RULES #######

    
/*CourtyardBuilding-->
offset(-3, inside)
    shapeO(myFrontDepth,myRightWidth,myBackDepth,myLeftWidth) { shape : Footprint | remainder: NIL }

Footprint -->
    extrude(rand(10,20)) color(1,0,0)*/
    
/*@StartRule
CourtyardBuilding -->
	shapeO(4,4,4,14) { shape : Lot| remainder: NIL }*/

	


	

@StartRule
Lot -->
	#extrude(rand(10, 80))
	report("height", geometry.height())
	report("volume", geometry.volume)
	#SelectVerticalSurfaces
	SelectTopSurfaces
	SelectBalconies
	PlantOnFacades
	
#SelectVerticalSurfaces-->
	#comp(f){side: ReportVericalSurfaces}

#PlantOnFacades -->
#	plants.ScatterFacadeVeg(50,"#116530")

@StartRule#Roofs
SelectTopSurfaces -->
	comp(f){top: ReportTopSurfaces}
	
	
ReportTopSurfaces(surfaceType) -->
	case surfaceType == "Balcony":
		set(roofArea, meterConverter.sqmeterTosqft(geometry.area()))#lets report the roof area here, in case you do some offsets, setbacks or other geomtric manipulations
		report("Roofarea", roofArea) #use the attribute instead of calculating on the fly so you reduce bug finding.
		report("Soil Grade", soilGrade)
		
		set(rainfallIntensity, meterConverter.feet(geometry.height()))
		#report runoff saving will go here:
		set(runoffSavings, ReportRunoffSavings(rainfallIntensity, roofArea, soilGrade)) # you set the attribute to a new number using your function from below
		report("Runoff Savings", runoffSavings)
		PlantSeedsOnBalcony
		
	else:
		set(roofArea, meterConverter.sqmeterTosqft(geometry.area()))#lets report the roof area here, in case you do some offsets, setbacks or other geomtric manipulations
		report("Roofarea", roofArea) #use the attribute instead of calculating on the fly so you reduce bug finding.
		report("Soil Grade", soilGrade)
		
		set(rainfallIntensity, meterConverter.feet(geometry.height()))
		#report runoff saving will go here:
		set(runoffSavings, ReportRunoffSavings(rainfallIntensity, roofArea, soilGrade)) # you set the attribute to a new number using your function from below
		report("Runoff Savings", runoffSavings)
		PlantSeedsOnRoof

PlantSeedsOnBalcony -->
	vegetation.balconyPlantMachine(vegetation.VegetationGroup1)
	
PlantSeedsOnRoof -->
	vegetation.balconyPlantMachineRoof(vegetation.VegetationList)
####### FUNCTIONS #######
# AssignSoilGradeCoefficient Function
SoilGradeCoefficient(gradeType) =
	case gradeType == "GradeOne": 0.1
	case gradeType == "GradeTwo":  0.2
	case gradeType == "GradeThree": 0.3
	case gradeType == "GradeFour": 0.4
	else: 0 #what happens with Grade zero?
	
#Savings should be a function not a rule
#careful where you put the parenthesis and the multiplications, you might get different results...
ReportRunoffSavings(rainfallIntensity, roofArea, soilGrade) = rainfallIntensity * roofArea - (soilGrade * rainfallIntensity * roofArea)
	
	


	
