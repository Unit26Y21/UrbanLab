/**
 * File:    EventLanes.cga
 * Created: 20 Nov 2021 21:04:44 GMT
 * Author:  mozar
 */

version "2019.0"

const textureFolder =  "assets/textures/" 

@StartRule
# you can use offset OR you can use the setback funcion:
BlockDivision-->
	setback(3){all: ExternalRing | remainder: AreaDivider}
 
ExternalRing-->
	setback(3){all: ExternalRing | remainder: AreaDivider}
	color ("#ffcf54")


	
# You can use a combination of split or splitArea to subdive a block or lot to have variation
# you can use stochastic percentage assignment, similar to how you would do it in an attribute
# to determine outcomes INSIDE the rule

////////////////////////////////////////////////////////////////////////////////////////
// X AXIS LANE DIVIDER /////////////////////////////////////////////////////////////////

AreaDivider -->
	split(z){ rand(5,10): WideLanes 
			| rand(1,2) : Separator 
			| rand(4,5) : NarrowLanes 
			| rand(1,2) : Separator 
			| rand(5,10): WideLanes 
			| rand(1,2) : Separator }*

Separator-->
	color ("#cfcfcf")

NarrowLanes-->
	color ("#b3b3b3")
	
WideLanes -->
	case float(listLast(getTreeKey())) % 2 == 0:
		split(x){rand(10,20): selectOddLanes }* 
	else: 
		Second
		

////////////////////////////////////////////////////////////////////////////////////////
// TILES IN WIDE LANES /////////////////////////////////////////////////////////////////
		
selectOddLanes -->
	//Seven/////////////////////////////////////
	case float(listLast(getTreeKey())) % 7 == 0:
#		scatter(surface, 2, uniform){ Benches }
	Seven
	

	//Five//////////////////////////////////////	
	case float(listLast(getTreeKey())) % 5 == 0:
		Five
#		roofShed(byHeight, rand(2), rand(4))
#		rotate(rel, object, 0, rand(360), 0)
	
	//KIOSKS////////////////////////////////////
	//Three/////////////////////////////////////	
	case float(listLast(getTreeKey())) % 3 == 0:
		scatter(surface, 3, uniform){ CheckOverlap }		
		Three	
	
	//FURNITURE/////////////////////////////////
	//Two///////////////////////////////////////			
	case float(listLast(getTreeKey())) % 2 == 0:
		#you might want to consider scattering the kios at the larger block and then removving the ones that clash with one another and with other objects.
		scatter(surface, 2, uniform){ Benches }
		scatter(surface, 2, uniform){ Trees }
		Two
	
	//One//////////////////////////////////////		
	else:
		One

	
CheckOverlap --> //////////////////////////Not working CheckingOverlap rule	
	case touches(all) : NIL
	case overlaps(all) : NIL
	else : Kiosks
	
Kiosks-->
	primitiveQuad(2,3)
 	rotate(rel, object, 0, rand(360),0)
 	i("Street Vendor.dae", yUp, keepSizeAlignPosition)


///////////////////////////////////////////////////////////////////////////////
//BENCHES//////////////////////////////////////////////////////////////////////
 	
Benches-->
	primitiveQuad(rand(5, 7), rand (5,7))
	LittleBench
	BigBench

LittleBench-->
	rotate(rel, object, 0, rand(360),0)
	i("Garden+Bench.dae", yUp, keepSizeAlignPosition)

BigBench-->
	rotate(rel, object, 0, rand(360),0)
	i("Garden+Bench2.dae", yUp, keepSizeAlignPosition)

/////////////////////////////////////
//TREES/////////////////////////////

Trees-->
	rotate(rel, object, 0, rand(360),0)
	i("Tree.dae", yUp, keepSizeAlignPosition)


///////////////////////////////////////////////////////////////////////////////
//TEXTURES/////////////////////////////////////////////////////////////////////

Second-->
	color ("#e88079")
	
	
Five-->
	tileUV(0,2,2) texture(textureFolder + "ConcreteTiles.jpg")
	
Three-->
#	color("#c8f5a2")
	tileUV(0,2,2) texture(textureFolder + "ConcreteTiles.jpg")
	
Two-->
#	color("#c94450")
	tileUV(0,2,2) texture(textureFolder + "Grass+Concrete.jpg")
	
One-->
	color ("#cfcfcf")
	
Seven-->
	split(z){ 0.5 : Two | 0.5 : Separator }*
	
	
	
dividerExample1 -->
	20%: split(y){rand(5,10): PotentialLocation}*
	15%: split(y){rand(5,10): PotentialLocation}*
	5%: split(y){rand(1,5): PotentialLocation}*
	else: split(y){3: PotentialLocation}*
	
	 
	PotentialLocation -->
#choose the face, then randomly between 0 and the total number of components
	comp(f){rint(rand(0,comp.total)): Kiosks} #we use comp.total to access the total number of splits
